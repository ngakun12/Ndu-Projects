{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Some weights of BertForSequenceClassification were not initialized from the model checkpoint at bert-base-uncased and are newly initialized: ['classifier.bias', 'classifier.weight']\n",
      "You should probably TRAIN this model on a down-stream task to be able to use it for predictions and inference.\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 1/3, Validation Loss: 0.26069284975528717, Validation Accuracy: 0.8656249940395355\n",
      "Epoch 2/3, Validation Loss: 0.14560259878635406, Validation Accuracy: 1.0\n",
      "Epoch 3/3, Validation Loss: 0.0916668139398098, Validation Accuracy: 0.9593749940395355\n"
     ]
    }
   ],
   "source": [
    "import torch\n",
    "from transformers import BertTokenizer, BertForSequenceClassification\n",
    "from torch.utils.data import DataLoader, Dataset\n",
    "from sklearn.model_selection import train_test_split\n",
    "\n",
    "data_dict = {\n",
    "    \"Amphetamine\": [\"Amy\", \"bennies\", \"benz\", \"dexies\", \"diet pills\", \"get ups\", \"pep pills\", \"wake-ups\", \"amphetamine\"],\n",
    "    \"Cocaine\": [\"Blow\", \"coke\", \"crack\", \"nose candy\", \"cocaine\", '❄️', '🌨️', '⛄', '💎', '🎱', '🔑', '😛', '🐡'],\n",
    "    \"DMT\": [\"Dimitri\", \"dmt\"],\n",
    "    \"General\": [\"Drugs\", \"drug\"],\n",
    "    \"GHB\": [\"Georgia home boy\", \"grievous bodily harm\", \"ghb\", \"liquid ecstasy\", \"liquid e\", \"liquid x\"],\n",
    "    \"Heroin\": [\"Black tar\", \"brown sugar\", \"china white\", \"heroin\", \"mexican brown\", \"skag\", \"white horse\", '🤎', '🐉'],\n",
    "    \"Hydrocodone\": [\"357s\", \"dro\", \"fluff\", \"norco\", \"vics\", \"vikes\", \"watsons\", \"hydrocodone\"],\n",
    "    \"Ketamine\": [\"Cat valium\", \"special k\", \"vitamin k\", \"ketamine\"],\n",
    "    \"Klonopin\": [\"k-pin\", \"super valium\", \"klonopin\"],\n",
    "    \"LSD\": [\"Acid\", \"blotter acid\", \"blotter\", \"electric kool aid\", \"lucy in the sky with diamonds\", \"microdot\", \"tabs\", \"lsd\"],\n",
    "    \"Marijuana\": [\"420\", \"blunt\", \"bud\", \"dagga\", \"dope\", \"ganja\", \"grass\", \"green\", \"hashish\", \"hash\", \"hemp\", \"herb\", \"mary jane\", \"pot\", \"weed\", \"marijuana\", 'smoke', '🍃', '🍁', '🥦', '💨', '🛒', '🍯', '🕯️', 'carts', 'wax', 'dabs', 'extract'],\n",
    "    \"MDMA\": [\"e\", \"ecstasy\", \"happy pill\", \"love drug\", \"molly\", \"vitamin e\", \"xtc\", \"mdma\"],\n",
    "    \"Mescaline\": [\"Blue caps\", \"media luna\", \"mescal\", \"mezcakuba\", \"topi\", \"mescaline\"],\n",
    "    \"Methamphetamine\": [\"Crank\", \"crystal\", \"meth\", \"shards\", \"speed\", \"tweak\", \"uppers\", \"methamphetamine\", 'meth', '🔮', '💙', '💎', '🧪'],\n",
    "    \"Mushrooms\": [\"Boomers\", \"baps\", \"mushies\", \"shrooms\", \"tweezes\", \"mushrooms\", '🍄'],\n",
    "    \"Nitrous Oxide\": [\"Buzz bomb\", \"laughing gas\", \"nitrous\", \"nox\", \"whippets\", \"nitrous oxide\"],\n",
    "    \"Opioid\": [\"Abstral\", \"acetaminophen\", \"actiq\", \"china girl\", \"codeine\", \"dance fever\", \"dilaudid\", \"duragesic\", \"exalgo\", \"fentanyl\", \"hydromorphone\", \"lorcet\", \"lortab\", \"methadone\", \"morphine\", \"murder 8\", \"onsolis\", \"oxy\", \"oxycodone\", \"oxyContin\", \"oxymorphone\", \"percocet\", \"vicodin\", \"opioid\", 'perc', '💊' , '🅿️', '🔵' , '🍌'],\n",
    "    \"PCP\": [\"Angel dust\", \"love boat\", \"peace pill\", \"superweed\", \"pcp\"],\n",
    "    \"Peyote\": [\"Black button\", \"green button\", \"hikuli\", \"hyatari\", \"peyote\"],\n",
    "    \"Ritalin\": [\"Ritalin\"],\n",
    "    \"Steroids\": [\"Gym candy\", \"pumpers\", \"roids\", \"steroids\", 'tren'],\n",
    "    \"Synthetic Cathinones\": [\"Bath salts\", \"bloom\", \"cloud 9\", \"cloud nine\", \"cosmic blast\", \"flakka\", \"ivory wave\", \"lunar wave\", \"vanilla sky\", \"white lightning\", \"synthetic cathinones\"],\n",
    "    \"Xanax\": [\"Benzos\", \"xanies\", \"z bars\", \"zanbars\", \"xanax\", 'xans', '💊', '🍫', '🚌']\n",
    "}\n",
    "# Define a custom dataset class\n",
    "class DrugDataset(Dataset):\n",
    "    def __init__(self, texts, labels, tokenizer, max_len):\n",
    "        self.texts = texts\n",
    "        self.labels = labels\n",
    "        self.tokenizer = tokenizer\n",
    "        self.max_len = max_len\n",
    "    \n",
    "    def __len__(self):\n",
    "        return len(self.texts)\n",
    "    \n",
    "    def __getitem__(self, idx):\n",
    "        text = self.texts[idx]\n",
    "        label = self.labels[idx]\n",
    "        encoding = self.tokenizer(text, truncation=True, padding='max_length', max_length=self.max_len, return_tensors='pt')\n",
    "        return {\n",
    "            'input_ids': encoding['input_ids'].flatten(),\n",
    "            'attention_mask': encoding['attention_mask'].flatten(),\n",
    "            'label': torch.tensor(label, dtype=torch.long)\n",
    "        }\n",
    "\n",
    "# Define your sentences and labels\n",
    "positive_texts = [\"After a long day at work, I like to relax with some weed and watch a movie.\",\n",
    "\"He was known for his excessive use of coke, often staying up all night partying.\",\n",
    "\"They took ecstasy at the rave and danced until sunrise.\",\n",
    "\"The addict struggled to break free from the grip of heroin addiction.\",\n",
    "\"She had a profound spiritual experience while tripping on acid in the forest.\",\n",
    "\"The dangers of meth were evident in the emaciated figures of its chronic users.\",\n",
    "\"She struggled with anxiety and relied on xanax to calm her nerves.\",\n",
    "\"He underwent a ketamine infusion therapy session to treat his depression.\",\n",
    "\"They went camping and consumed magic mushrooms, experiencing vivid hallucinations.\",\n",
    "\"The use of angel dust can lead to unpredictable and dangerous behavior.\", \"They indulged in a line of blow before hitting the nightclub.\",\n",
    "\"The concert was an MDMA-fueled celebration of music and love.\",\n",
    "\"She experimented with LSD during her college years, seeking new perspectives.\",\n",
    "\"He spiraled into addiction after trying meth for the first time.\",\n",
    "\"The party was stocked with a variety of drugs, from weed to cocaine.\",\n",
    "\"She relied on ketamine to numb the pain of her past trauma.\",\n",
    "\"He struggled with withdrawal symptoms after quitting opioids cold turkey.\",\n",
    "\"The dangers of synthetic cathinones became apparent after a friend's overdose.\",\n",
    "\"She sought refuge in mushrooms, hoping to find inner peace.\",\n",
    "\"They sold PCP on the streets to fund their addiction.\",\"Wanna smoke later?\",\n",
    "\"Stressed, got xanax?\",\n",
    "\"Took acid, it's wild!\",\n",
    "\"Where's the coke tonight?\",\n",
    "\"Trying MDMA, thoughts?\",\n",
    "\"Taking shrooms for mood.\",\n",
    "\"Got ketamine? Need numb.\",\n",
    "\"Selling some steroids, low on cash.\",\n",
    "\"Need sleeping pills, can't sleep.\",\n",
    "\"Heroin's risky, be careful.\",\n",
    "'Lets go smoke some weed',\n",
    "'Can I get some coke',\n",
    "'Lets go smoke',\n",
    "'lets smoke some pcp']\n",
    "for drug_terms in data_dict.values():\n",
    "    positive_texts.extend(drug_terms)\n",
    "negative_texts = [\"The sun is shining brightly outside.\",\n",
    "    \"I enjoy reading books in my spare time.\",\n",
    "    \"Apples are a delicious and healthy snack.\",\n",
    "    \"Exercise is important for maintaining good health.\",\n",
    "    \"I like to spend time with my family on weekends.\",\n",
    "    \"Learning new skills can be both fun and rewarding.\",\n",
    "    \"Coffee is my go-to drink in the morning.\",\n",
    "    \"The internet provides a wealth of information on various topics.\",\n",
    "    \"Traveling allows us to experience different cultures and cuisines.\",\n",
    "    \"I enjoy listening to music while I work.\", \"The cat is sleeping on the windowsill.\",\n",
    "    \"I enjoy gardening in my backyard.\",\n",
    "    \"Reading a good book is a great way to relax.\",\n",
    "    \"I like to cook new recipes on weekends.\",\n",
    "    \"The movie I watched last night was very entertaining.\",\n",
    "    \"Playing sports is a fun way to stay active.\",\n",
    "    \"I'm planning a hiking trip for next month.\",\n",
    "    \"Spending time with friends brings me joy.\",\n",
    "    \"I'm learning to play the guitar in my spare time.\",\n",
    "    \"Volunteering at the local shelter is rewarding.\", \"The flowers in the garden are blooming beautifully.\",\n",
    "    \"I'm looking forward to visiting my grandparents this weekend.\",\n",
    "    \"Studying hard is important for academic success.\",\n",
    "    \"I enjoy going for long walks in the countryside.\",\n",
    "    \"Listening to classical music helps me relax after a long day.\",\n",
    "    \"I'm excited about the new project I'm working on at work.\",\n",
    "    \"Spending time outdoors is invigorating and refreshing.\",\n",
    "    \"I'm planning to redecorate my living room next month.\",\n",
    "    \"I love trying out new recipes and cooking for my friends.\",\n",
    "    \"Watching documentaries about nature is fascinating to me.\",\n",
    "    \"I need to pull the weeds out of my lawn tonight.\",\n",
    "    \"She's always on top of her game, like a real Lucy in the sky with diamonds.\",\n",
    "    \"Let's grab some green and enjoy a picnic in the park.\",\n",
    "    \"The party was a blast, everyone was dancing like they were on ecstasy.\",\n",
    "    \"It started to snow outside because its the holidays.\",\n",
    "    \"He's as fast as lightning, always on his feet like he has the need for speed.\",\n",
    "    \"I'm feeling a bit groggy today, maybe I need a cup of joe to wake me up.\",\n",
    "    \"Her outfit was so flashy, she looked like a disco ball on the dance floor.\",\n",
    "    \"I'm craving some sugar, maybe I'll bake some brownies for dessert.\",\n",
    "    \"The music was so loud, it felt like a bomb went off in my ears.\",\n",
    "    'I drink Water',\n",
    "    'I need to cut the grass today',\n",
    "    'During Yard work, i need to pull the weeds out of the front yard tomorrow',\n",
    "    \"Park for basketball!\",\n",
    "    \"Hiking in mountains.\",\n",
    "    \"Movie marathon with popcorn.\",\n",
    "    \"Soccer match cheering.\",\n",
    "    \"Backyard BBQ and games.\",\n",
    "    \"Bowling night.\",\n",
    "    \"Escape room downtown.\",\n",
    "    \"Beach for surfing.\",\n",
    "    \"Karaoke at bar.\",\n",
    "    \"Cooking dinner together.\",\n",
    "    'Lets go play some Golf',\n",
    "    'Can I get some food',\n",
    "    'Can I get some Milk']\n",
    "labels = []\n",
    "\n",
    "all_texts = positive_texts + negative_texts\n",
    "all_labels = [1] * len(positive_texts) + [0] * len(negative_texts)\n",
    "\n",
    "train_texts, val_texts, train_labels, val_labels = train_test_split(all_texts, all_labels, test_size=0.2, random_state=42)\n",
    "\n",
    "tokenizer = BertTokenizer.from_pretrained('bert-base-uncased')\n",
    "model = BertForSequenceClassification.from_pretrained('bert-base-uncased', num_labels=2)\n",
    "\n",
    "batch_size = 16\n",
    "max_len = 128\n",
    "learning_rate = 2e-5\n",
    "num_epochs = 3\n",
    "\n",
    "# Create datasets and dataloaders\n",
    "train_dataset = DrugDataset(train_texts, train_labels, tokenizer, max_len)\n",
    "train_loader = DataLoader(train_dataset, batch_size=batch_size, shuffle=True)\n",
    "\n",
    "val_dataset = DrugDataset(val_texts, val_labels, tokenizer, max_len)\n",
    "val_loader = DataLoader(val_dataset, batch_size=batch_size, shuffle=False)\n",
    "\n",
    "optimizer = torch.optim.AdamW(model.parameters(), lr=learning_rate)\n",
    "loss_fn = torch.nn.CrossEntropyLoss()\n",
    "\n",
    "# Training loop\n",
    "for epoch in range(num_epochs):\n",
    "    model.train()\n",
    "    for batch in train_loader:\n",
    "        input_ids = batch['input_ids']\n",
    "        attention_mask = batch['attention_mask']\n",
    "        labels = batch['label']\n",
    "\n",
    "        optimizer.zero_grad()\n",
    "\n",
    "        outputs = model(input_ids=input_ids, attention_mask=attention_mask, labels=labels)\n",
    "        loss = outputs.loss\n",
    "        loss.backward()\n",
    "        optimizer.step()\n",
    "\n",
    "    # Validation loop\n",
    "    model.eval()\n",
    "    val_losses = []\n",
    "    val_accs = []\n",
    "    for batch in val_loader:\n",
    "        input_ids = batch['input_ids']\n",
    "        attention_mask = batch['attention_mask']\n",
    "        labels = batch['label']\n",
    "\n",
    "        with torch.no_grad():\n",
    "            outputs = model(input_ids=input_ids, attention_mask=attention_mask, labels=labels)\n",
    "            val_loss = outputs.loss\n",
    "            logits = outputs.logits\n",
    "\n",
    "        val_losses.append(val_loss.item())\n",
    "        preds = torch.argmax(logits, axis=1)\n",
    "        accuracy = (preds == labels).float().mean().item()\n",
    "        val_accs.append(accuracy)\n",
    "\n",
    "    avg_val_loss = sum(val_losses) / len(val_losses)\n",
    "    avg_val_acc = sum(val_accs) / len(val_accs)\n",
    "    print(f\"Epoch {epoch + 1}/{num_epochs}, Validation Loss: {avg_val_loss}, Validation Accuracy: {avg_val_acc}\")\n",
    "\n",
    "model.save_pretrained(\"drug_classification_model\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Validation Accuracy: 0.9655172413793104\n",
      "Validation Precision: 0.98\n",
      "Validation Recall: 0.98\n",
      "Validation F1 Score: 0.98\n"
     ]
    }
   ],
   "source": [
    "from sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score\n",
    "\n",
    "# Define a function to evaluate the model and compute metrics\n",
    "def evaluate_model(model, dataloader):\n",
    "    model.eval()\n",
    "    all_predictions = []\n",
    "    all_labels = []\n",
    "    with torch.no_grad():\n",
    "        for batch in dataloader:\n",
    "            input_ids = batch['input_ids']\n",
    "            attention_mask = batch['attention_mask']\n",
    "            labels = batch['label']\n",
    "            outputs = model(input_ids=input_ids, attention_mask=attention_mask)\n",
    "            logits = outputs.logits\n",
    "            predictions = torch.argmax(logits, axis=1)\n",
    "            all_predictions.extend(predictions.cpu().numpy())\n",
    "            all_labels.extend(labels.cpu().numpy())\n",
    "    \n",
    "    accuracy = accuracy_score(all_labels, all_predictions)\n",
    "    precision = precision_score(all_labels, all_predictions)\n",
    "    recall = recall_score(all_labels, all_predictions)\n",
    "    f1 = f1_score(all_labels, all_predictions)\n",
    "    \n",
    "    return accuracy, precision, recall, f1\n",
    "\n",
    "# Evaluate the model on the validation set\n",
    "val_accuracy, val_precision, val_recall, val_f1 = evaluate_model(model, val_loader)\n",
    "\n",
    "# Print the metrics\n",
    "print(\"Validation Accuracy:\", val_accuracy)\n",
    "print(\"Validation Precision:\", val_precision)\n",
    "print(\"Validation Recall:\", val_recall)\n",
    "print(\"Validation F1 Score:\", val_f1)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Sentence: I'm planning to go for a hike this weekend. --> Prediction: Non-drug-related\n",
      "Sentence: I'm feeling a bit tired today, maybe I'll have some coffee. --> Prediction: Non-drug-related\n",
      "Sentence: Let's grab some snacks for the road trip. --> Prediction: Non-drug-related\n",
      "Sentence: I need to study for my exams next week. --> Prediction: Non-drug-related\n",
      "Sentence: I'm going to visit my family over the holidays. --> Prediction: Non-drug-related\n",
      "Sentence: I'm excited about the new project at work. --> Prediction: Non-drug-related\n",
      "Sentence: I think I'll go for a run in the park later. --> Prediction: Non-drug-related\n",
      "Sentence: I'm craving some ice cream, maybe I'll stop by the store. --> Prediction: Non-drug-related\n",
      "Sentence: I'm planning to redecorate my room next month. --> Prediction: Non-drug-related\n",
      "Sentence: I need to water the plants in the garden. --> Prediction: Non-drug-related\n",
      "Sentence: I drink Water --> Prediction: Non-drug-related\n"
     ]
    }
   ],
   "source": [
    "# Load the trained model\n",
    "model = BertForSequenceClassification.from_pretrained(\"drug_classification_model\")\n",
    "\n",
    "# Define test sentences\n",
    "test_sentences = [\n",
    "    \"I'm planning to go for a hike this weekend.\",\n",
    "    \"I'm feeling a bit tired today, maybe I'll have some coffee.\",\n",
    "    \"Let's grab some snacks for the road trip.\",\n",
    "    \"I need to study for my exams next week.\",\n",
    "    \"I'm going to visit my family over the holidays.\",\n",
    "    \"I'm excited about the new project at work.\",\n",
    "    \"I think I'll go for a run in the park later.\",\n",
    "    \"I'm craving some ice cream, maybe I'll stop by the store.\",\n",
    "    \"I'm planning to redecorate my room next month.\",\n",
    "    \"I need to water the plants in the garden.\",\n",
    "    'I drink Water'\n",
    "]\n",
    "\n",
    "# Tokenize and encode test data\n",
    "tokenized_test = tokenizer(test_sentences, truncation=True, padding=True, return_tensors=\"pt\")\n",
    "\n",
    "# Run inference\n",
    "with torch.no_grad():\n",
    "    outputs = model(**tokenized_test)\n",
    "    logits = outputs.logits\n",
    "\n",
    "# Get predictions\n",
    "predictions = torch.argmax(logits, axis=1)\n",
    "\n",
    "# Print predictions\n",
    "for sentence, prediction in zip(test_sentences, predictions):\n",
    "    label = \"Drug-related\" if prediction == 1 else \"Non-drug-related\"\n",
    "    print(f\"Sentence: {sentence} --> Prediction: {label}\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Sentence: You got extra carts for when we go to school tomorrow --> Prediction: Drug-related\n",
      "Sentence: She was on ecstasy at the party last night --> Prediction: Drug-related\n",
      "Sentence: Let's smoke some weed by the beach. --> Prediction: Drug-related\n",
      "Sentence: I dropped some tabs of acid and watched the stars dance in the sky. --> Prediction: Drug-related\n",
      "Sentence: He's always tweaking, especially whenever we see him --> Prediction: Drug-related\n",
      "Sentence: We scored some molly for the concert, gonna have a wild night! --> Prediction: Drug-related\n",
      "Sentence: I took a hit of that crystal and felt like I could run a marathon. --> Prediction: Drug-related\n",
      "Sentence: They were puffing on some dank weed, filling the room with a sweet aroma. --> Prediction: Drug-related\n",
      "Sentence: She's been popping pills like candy. --> Prediction: Drug-related\n",
      "Sentence: I saw him doing coke in the bathroom --> Prediction: Drug-related\n"
     ]
    }
   ],
   "source": [
    "# Load the trained model\n",
    "model = BertForSequenceClassification.from_pretrained(\"drug_classification_model\")\n",
    "\n",
    "# Define test sentences\n",
    "test_sentences = [\n",
    "    \"You got extra carts for when we go to school tomorrow\",\n",
    "\"She was on ecstasy at the party last night\",\n",
    "\"Let's smoke some weed by the beach.\",\n",
    "\"I dropped some tabs of acid and watched the stars dance in the sky.\",\n",
    "\"He's always tweaking, especially whenever we see him\",\n",
    "\"We scored some molly for the concert, gonna have a wild night!\",\n",
    "\"I took a hit of that crystal and felt like I could run a marathon.\",\n",
    "\"They were puffing on some dank weed, filling the room with a sweet aroma.\",\n",
    "\"She's been popping pills like candy.\",\n",
    "\"I saw him doing coke in the bathroom\"\n",
    "]\n",
    "\n",
    "# Tokenize and encode test data\n",
    "tokenized_test = tokenizer(test_sentences, truncation=True, padding=True, return_tensors=\"pt\")\n",
    "\n",
    "# Run inference\n",
    "with torch.no_grad():\n",
    "    outputs = model(**tokenized_test)\n",
    "    logits = outputs.logits\n",
    "\n",
    "# Get predictions\n",
    "predictions = torch.argmax(logits, axis=1)\n",
    "\n",
    "# Print predictions\n",
    "for sentence, prediction in zip(test_sentences, predictions):\n",
    "    label = \"Drug-related\" if prediction == 0 else \"Non-drug-related\"\n",
    "    print(f\"Sentence: {sentence} --> Prediction: {label}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The input sentence 'Can I get some milk' is classified as: Non-drug-related\n"
     ]
    }
   ],
   "source": [
    "def classify_sentence(sentence, model, tokenizer):\n",
    "    inputs = tokenizer(sentence, truncation=True, padding=True, return_tensors=\"pt\")\n",
    "    with torch.no_grad():\n",
    "        outputs = model(**inputs)\n",
    "        logits = outputs.logits\n",
    "    prediction = torch.argmax(logits, axis=1).item()\n",
    "    return prediction\n",
    "\n",
    "\n",
    "custom_input = input(\"Enter a sentence to classify: \")\n",
    "prediction = classify_sentence(custom_input, model, tokenizer)\n",
    "label = \"Drug-related\" if prediction == 1 else \"Non-drug-related\"\n",
    "print(f\"The input sentence '{custom_input}' is classified as: {label}\")\n"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.6"
  },
  "orig_nbformat": 4
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
